import numpy as np
import iris_data as iris
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import torch.optim as optim

train_data = iris.give_train()
train_data = train_data + iris.give_test()

print(train_data)

curr_mult = 30
exin_array = [1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1]

class myNeuron():
	def __init__(self, V=-65, u=-13, a=0.02, b=0.2, c=-65, d=4,  I=0, jF = False, exin = 1): 
		self.a = a
		self.b = b
		self.c = c
		self.d = d
		self.V = V
		self.u = u
		self.I = I
		self.jF = jF
		self.exin = exin

num_neurons = 20
num_models = 50
num_samps = 20
num_gens = 50
num_mutate = 10
max_volt = 50
sim_length = 300
lr = 0.05

def dif_v(v, u, I):

	return (0.04*v**2)+(5*v)+140-u+I

def dif_u(v, u, a, b):

	return a*(b*v-u)

def step_v(NeurArray):
	for NeurIdx in range(0, len(NeurArray)):
		NeurObj = NeurArray[NeurIdx]
		NeurObj.V += dif_v(NeurObj.V, NeurObj.u, NeurObj.I)
		NeurObj.u += dif_u(NeurObj.V, NeurObj.u, NeurObj.a, NeurObj.b)
		if NeurObj.jF == True:
			NeurObj.jF = False
			NeurObj.V = NeurObj.c
			NeurObj.u = NeurObj.u + NeurObj.d
		
		if NeurObj.V >= -30:
			NeurObj.V = 30
			NeurObj.jF = True
		

		if NeurObj.V <= -70:
			NeurObj.V = -70
		

		NeurArray[NeurIdx] = NeurObj
	
	return NeurArray

def step_I(NeurArray, SynArray):
	#this formerly acted on the current input I 
	#has since been changed to act on voltage in line with the IZH paper
	for PreNeurIdx in range(0, len(NeurArray)):
		for PostNeurIdx in range(0, len(NeurArray)):
			NeurArray[PostNeurIdx].V += SynArray[PreNeurIdx][PostNeurIdx]*NeurArray[PreNeurIdx].jF*NeurArray[PreNeurIdx].exin

	return NeurArray

def zero_I(NeurArray):
	for NeurIdx in range(0, len(NeurArray)):
		NeurArray[NeurIdx].I = 0
	
	return NeurArray

def findOutput(NeurArray, IrisIdx, SynArray):
	t = 0
	allJFs = np.zeros((sim_length, num_neurons))
	NeurArray[0].I = train_data[IrisIdx][0][0]*curr_mult
	NeurArray[1].I = train_data[IrisIdx][0][1]*curr_mult
	NeurArray[2].I = train_data[IrisIdx][0][2]*curr_mult
	NeurArray[3].I = train_data[IrisIdx][0][3]*curr_mult

	while t < sim_length:

		NeurArray = step_I(NeurArray, SynArray)
		NeurArray = step_v(NeurArray)
		
		for i in range(0, num_neurons):
			allJFs[t][i] += NeurArray[i].jF

		t += 1

	return allJFs
	
def resetNet(NeurArray):
	resetSyns = np.zeros((num_neurons, num_neurons))
	NeurArray = zero_I(NeurArray)
	t = 0
	while t < 150:
		NeurArray = step_v(NeurArray)
		NeurArray = step_I(NeurArray, resetSyns)

		t += 1
	
	return NeurArray

def MSELoss(ar1, ar2):
	mse = 0
	for idx in range(0, len(ar1)):
		mse += ((ar1[idx]-ar2[idx])^2)/len(ar1)
	
	return mse

def getJFiris(NeurArray, SynArray):
	at_each_idx = np.zeros((len(train_data), sim_length, num_neurons))
	for idx in range(0, len(train_data)):
		NeurArray = resetNet(NeurArray)
		at_each_idx[idx] = findOutput(NeurArray, idx, SynArray)

	
	return at_each_idx

def findFireRece(SpikeSequence, toi):
	fireRece = np.zeros(num_neurons)
	look_back = 5
	if toi - look_back < 0:
		start_t = 0
	else:
		start_t = toi - look_back
	for i in range(0, num_neurons):
		for t in range(start_t, toi):
			if SpikeSequence[t][i] == 1:
				fireRece[i] = 1
				break

	return fireRece


def updateWeight(trueFireAtt, guessFireAtt, ArrayOfNeurs, fireRece):
	delta = np.zeros((num_neurons, num_neurons))
	for pre in range(0, num_neurons):
		for post in range(0, num_neurons):
			if pre == post:
				continue
			delta[pre][post] += lr*ArrayOfNeurs[pre].exin*(trueFireAtt[post] - guessFireAtt[post])*fireRece[pre]
			#lr is learning rate, determines how big of a change it can make
			#exin just reveres direction of learning, inhibitory neurons lose weight if the fire and their post synapic neuron should have and vice versa
			#true - guess gives driection based on order kinda like STDP, if the guess fires at the same time as the true network then all good and no change is made, logic for other cases
			#if the pre syn didn't even fire recently its not fair to change its weight as it didnt have an effect so thats the fireRece variable

	return delta

ArrayOfNeurs = []
#k = load("D:\\Neuro Sci\\juliaIZH\\STDPRedoExin.jld")
#exin_array = k["exin"]

size = 5
xy_off = 5
ModBrain = [[0.0,37.48733523959694,44.94322743657306,6.699138662950821,15.006051686035438,23.955180199315258,22.51252252432406,49.3405489291712,38.116991745974296,23.875973792648086,36.31717345267755,6.60553610927016,43.860442863997626,35.57828442422754,43.43138868996672,10.766496703976442,28.0647144201353,7.246316157242816,45.36082400007071,34.03690033234174],[37.55489735119944,0.0,12.28609309491982,47.15813930683145,33.93178379380465,19.786133848149966,12.34781852622242,21.22601751184867,48.82195755831395,20.62861642155291,44.8335311508429,33.3988081578869,6.3263843705373635,32.452924072793934,32.80131683809292,48.302679858458255,34.1299996924651,35.15268136101864,10.318037595298524,0.0],[24.095844754291907,41.81425102266133,0.0,44.51171331527438,35.83110495276908,25.76226868073758,47.044705917407086,36.58912460903197,28.22791418875677,17.25629045686939,15.31374176628098,41.70351925729842,17.140180758400938,2.6183159727907412,46.34557120109668,41.57417027317676,17.37825570116747,20.70124827915144,7.862490030257524,11.866183857693995],[49.83246537229315,47.642910893593005,43.471319493676354,0.0,1.9024673672325854,14.641574821819198,42.85464350568665,38.90850836089932,49.734488867069416,11.50127005942181,12.819355723563087,45.85707286304719,23.412625022957428,9.123400916746698,0.6757445409778462,3.6688856944730954,21.005160978610444,17.10345636761545,33.2343232941771,7.38769879365207],[23.402480442588203,21.496570405815124,11.168297953235829,23.73449882018234,0.0,38.814898412699186,44.21667500872718,49.28732318305514,47.65617587943981,27.784885419729495,10.69385787934043,15.344198072229192,42.62323253999598,46.094702852944025,10.129290807629326,30.8282145553043,17.519756947032505,12.607281230539929,30.39850655826913,22.660274594408875],[45.95627929106147,34.40402357024267,37.169313039347685,39.49126342746906,8.451456365892474,0.0,49.552032098503105,36.0490894848831,45.27680017874436,23.9457729311705,39.574254166008856,35.858157004207186,32.15985104754138,20.918552725669542,17.325286328734286,39.808597006825,38.82949691186246,30.066437508720405,20.67706072505617,0.31702168057405333],[42.90692128610692,19.998432601845916,41.95666404249064,28.598303988566176,25.101094618597102,27.90913878064996,0.0,29.649381349144853,9.080570424571032,26.662361494006042,28.749537265896812,15.36449380865334,38.67183403819724,10.560047558310576,16.341426970808133,0.4268567447671068,18.675333581087084,3.390510198797453,5.986822750011845,8.41089647450876],[27.43537850144825,14.952476474772824,16.008834602206985,10.251303631141761,13.614360507519303,49.63813472593462,32.3085514586763,0.0,9.332226246699499,29.43859843377855,21.18936931004279,13.460192450010283,24.751952697190994,22.257083990762354,39.30727785640638,8.851752820565823,17.727498358314936,4.064522634377532,3.468503463184014,14.84593552577187],[35.86903813493142,0.7444392662241672,31.187748554954357,37.023865884980104,8.302204375504047,44.75877659906471,44.88011578568291,5.885901548458477,0.0,21.76451650266887,4.842400908865247,29.959822630950057,1.845439570764218,28.932801944225584,8.126768357487785,25.16114030975947,28.80936760651113,30.73115300905325,41.97336091109841,1.0821711780850896],[20.53669035694169,33.10174762617659,40.71121124892439,16.74632739222362,36.4894732705644,4.482845591825852,29.13985311483771,39.59723169408297,17.743774918401794,0.0,43.599777802416334,13.813758097570828,33.32228528551383,49.13104536070615,18.43537624846134,7.433196855016227,20.0940166183518,25.437194912943685,20.00911621764877,10.905422328186098],[34.80840526056789,29.979767946888213,44.64185298695338,19.5480834647291,4.121722999970867,5.761250068708418,2.49676918758025,18.56372622322952,34.45088935861627,7.781523072682367,0.0,31.37579627041677,25.123852625686094,48.76603262999144,31.747429015450585,30.75932530328901,11.788110510291672,8.193970611388435,35.06200167588329,7.926409090739556],[19.695533445773407,28.556568981085494,5.55118130418053,13.65514920218911,10.866837808913733,14.089290187752567,49.261099465791446,14.753169696606271,11.198918951161318,37.80499909237393,27.107727010318282,0.0,1.4341082388712623,38.065074257633896,32.01931916698272,15.481795431623674,5.630521457769783,35.120013718073636,33.35561625653531,25.61150379969334],[35.61591748029435,15.13785087929122,15.584487747610536,33.72798341316777,37.026036173311105,33.2869528904704,44.898487675918766,3.5028396634912697,49.96795706740582,23.951009446628703,15.052154318656013,18.442319461762953,0.0,34.955859088675226,26.663182634814124,9.41403466903689,6.987692253887645,29.95617275192525,49.12524341857204,49.710440661258126],[27.696098910588045,40.57711485535764,35.67610670711201,32.49549953662378,43.55592194068081,7.241595487683244,36.363481357929224,31.233649148573488,1.6372738348979066,19.37386434354168,13.11070856633419,17.29632064053071,48.830764753132264,0.0,5.901486440544468,48.85930980952023,26.83598917498336,1.3624070927546361,6.661701032825218,6.535189493443561],[10.861354421755603,5.332129656236995,6.696833264628877,29.166350634627,35.787774640827045,27.098287460968677,10.572554980861316,31.80273367264364,11.940103658375051,46.98236869397181,45.234319954467914,43.226183246639316,11.3178251437008,49.067592018876475,0.0,8.849536110394885,14.990569794725229,3.745958421094553,11.357141600434689,12.722071620468501],[37.70923624277052,1.3389284917888378,4.455979776857166,25.343311655727312,41.24463746868054,44.351319896826205,7.275610827375117,36.246256537940035,17.604236060448287,10.797088854437659,37.93382275994437,18.528133281445385,46.31065281151961,15.657311859033719,21.161050578104835,0.0,26.184731794760125,45.329877086604306,40.2766737911761,28.2710623055144],[5.583640320351013,26.392105961928603,15.190179246211134,24.89753741724798,25.531043902292815,5.699347661558674,35.627365330013575,27.697680916697976,4.583211333664927,39.951488068833605,47.693711843252295,13.079307443156619,48.60942721258743,28.26646423380254,8.124861228630737,26.583674723952715,0.0,43.335018265380405,38.43663749175191,49.903786800447826],[15.875773147828276,23.080440875737494,8.565695149009112,47.16028255718804,10.4582032484696,26.721758660031796,28.95651231281611,15.131612143586487,45.080321623222254,7.676295709717406,33.71147552817724,37.12204179118023,36.00822231568328,47.11732210099633,14.718637520722982,9.925307365061053,47.9253661611564,0.0,48.50875979038507,25.880562155294385],[28.628230046754222,46.82930410408231,8.725816166665451,24.860159732006586,39.195035913027965,3.135299998394042,8.526923396118246,2.1448164415346973,43.027949052538226,5.800606202575892,28.645919417319675,26.517056936438344,44.382378513434986,31.350066032931412,25.219458072595756,25.389837635642067,22.389833360178113,36.641947452043624,0.0,6.552640534091308],[28.964109860018,44.02044594866813,19.876268423643793,11.720034524586659,16.270780447603734,43.23273479202159,39.82761418478902,20.176620147225492,2.3239083310448216,26.940080123839394,41.79940802353058,25.314455501700145,38.11859353523226,3.0734418786752373,15.67018830532475,41.887569079921604,27.94058328460961,7.3960633757201135,22.27752022102003,0.0]]

for i in range(0, num_neurons):
	x = np.cos(2*np.pi*i/num_neurons)
	y = np.sin(2*np.pi*i/num_neurons)
	for j in range(0, num_neurons):
		xf = np.cos(2*np.pi*j/num_neurons)
		yf = np.sin(2*np.pi*j/num_neurons)

		color = np.ones((3)) - np.ones((3))*ModBrain[i][j]/max_volt
		plt.plot([x*size+xy_off, xf*size+xy_off], [y*size+xy_off, yf*size+xy_off], color = color)
	
for i in range(0, num_neurons):
	
	ArrayOfNeurs.append(myNeuron(-65, -13, 0.02, 0.2, -65, 4, 0, False, exin_array[i]))
	#app!(ArrayOfNeurs, [Neur(-65, -13, 0.02, 0.2, -65, 4, 0, False, 1)])
	if ArrayOfNeurs[i].exin == 1:
		color = [0,1,0]
	else:
		color = [0,1,1]
	
	x = np.cos(2*np.pi*i/num_neurons)
	y = np.sin(2*np.pi*i/num_neurons)
	plt.plot(x*size+xy_off, y*size+xy_off, marker="o", markersize=15, markeredgecolor="black", markerfacecolor=color)

#plt.show()


print(ModBrain)

reference_output = getJFiris(ArrayOfNeurs, ModBrain)
NewBrain = np.zeros((num_neurons, num_neurons))
BestBrain = np.zeros((num_neurons, num_neurons))

for gen in range(0, num_gens):
	max_streak = 0
	test_output = getJFiris(ArrayOfNeurs, NewBrain)

	for idx in range(0, len(train_data)):
		for t in range(0, sim_length):
			if t > max_streak:
				max_streak = t
				BestBrain = NewBrain
			if not np.array_equal(reference_output[idx][t], test_output[idx][t]):
				fireRece = findFireRece(test_output[idx], t)
				#print(fireRece)
				NewBrain += updateWeight(reference_output[idx][t], test_output[idx][t], ArrayOfNeurs, fireRece) 
				#print("broken")
				break

	print(gen, max_streak)

print(NewBrain)
print(BestBrain)

